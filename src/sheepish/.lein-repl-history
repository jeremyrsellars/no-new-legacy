(ns sheepish.d-parameterized-test-with-properties
  (:require [clojure.spec.alpha :as s]
            [clojure.spec.gen.alpha :as gen]
            [clojure.string :as string]
            [clojure.test :refer [deftest testing is]]))
(defn sheep-bleat?
  [s]
  true) ; obvious bug here!
(s/gen int?)
(ns sheepish.d-parameterized-test-with-properties
  (:require [clojure.spec.alpha :as s]
            [clojure.spec.gen.alpha :as gen]
            [clojure.string :as string]
            [clojure.test :refer [deftest testing is]]
            clojure.test.check.generators))
(defn sheep-bleat?
  [s]
  true) ; obvious bug here!
(s/gen int?)
exit
(ns sheepish.d-parameterized-test-with-properties
  (:require [clojure.spec.alpha :as s]
            [clojure.spec.gen.alpha :as gen]
            [clojure.string :as string]
            [clojure.test :refer [deftest testing is]]
            clojure.test.check.generators))
(defn sheep-bleat?
  [s]
  true) ; obvious bug here!
(s/gen int?)
(take 10 (repeatedly #(gen/generate (s/gen int?))))
(let [spec int?
      generator (s/gen spec)
      generate-example #(gen/generate generator)
      examples (repeatedly generate-example)]
  (take 10 examples))
(let [spec string?
      generator (s/gen spec)
      generate-example #(gen/generate generator)
      examples (repeatedly generate-example)]
  (take 10 examples))
(doc gen/generate)
(clojure.repl/doc gen/generate)
(clojure.repl/dir gen)
(let [spec nil?
      generator (s/gen spec)
      generate-example #(gen/generate generator)
      examples (repeatedly generate-example)]
  (take 10 examples))
(defn generate-examples
  [spec example-count]
  (let [generator (s/gen spec)
        generate-example #(gen/generate generator)
        examples (repeatedly generate-example)]
    (take example-count examples)))
(generate-examples int? 10)
(generate-examples string? 10)
(generate-examples nil? 3)
(generate-examples int? 10)
(generate-examples string? 3)
(generate-examples nil? 20)
(s/def ::any-string string?)
(generate-examples ::any-string 3)
(s/def ::a-or-b (s/with-gen #{"a" "b"}))
(generate-examples ::a-or-b 3)
(s/def ::a-or-b #{"a" "b"})
(generate-examples ::a-or-b 3)
(s/def ::a-or-b #{"a" "b"})
(generate-examples ::a-or-b 30)
(generate-examples ::a-or-b 20)
(s/gen int?)
(take 3 (repeatedly #(gen/generate (s/gen int?))))
(gen/sample (s/gen int?))
(gen/sample (s/gen int?) 3)
(gen/sample (s/gen int?) 30)
(s/gen "asd")
